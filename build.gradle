buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath libs.android.gradlePlugin
        classpath libs.license.gradlePlugin
    }
}

def modules_sdk = [
        // main module
        'uxkit',
        // firebase support
        'uxkit-firebase',
        // in conference specific "presentation"
        'uxkit-exoplayer-support', 'uxkit-youtube', 'uxkit-screenshare',
        // plugins related to services and system info
        'uxkit-incoming-call', 'uxkit-self-managed-call', 'uxkit-system-service',
        // common module
        'uxkit-common',

]

ext {
    buildToolsVersion = "32.0.0"
    minSdkVersion = 21
    compileSdkVersion = 32
    targetSdkVersion = 32

    groupId="com.voxeet.sdk"
    //underlying sdk
    //voxeetSdkVersion defined in the sdk.gradle file
    //voxeetUXKitVersion defined in the uxkit.gradle file
}

apply from: "./uxkit.gradle"
apply from: "./sdk.gradle"

allprojects {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url "https://android-sdk.voxeet.com/beta" }
        maven { url "https://android-sdk.voxeet.com/release" }
    }
}


task cleanAll {
    dependsOn = modules_sdk.collect { ":${it}:clean" }
}

task assembleAll {
    dependsOn = modules_sdk.collect { ":${it}:assembleRelease" }
}

task licenseAll {
    dependsOn = modules_sdk.collect { ":${it}:licenseReleaseReport" }

    modules_sdk.collect { "${it}/src/main/assets" }
            .each { folder -> new File(folder).mkdirs() }

    modules_sdk.each { name ->
        def report = "${name}/build/reports/licenses/licenseReleaseReport.json"
        def new_report = "${name}/build/reports/licenses/${name}.json"
        new File(report).renameTo(new File(new_report))

        copy { from new_report into "${name}/src/main/assets/" }
    }
}

task installAll {
    dependsOn = modules_sdk.collect { ":${it}:publishToMavenLocal" }
}

task uploadAll {
    dependsOn = modules_sdk.collect { ":${it}:publish" }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

subprojects {
    task allDeps(type: DependencyReportTask) {}
}
